import { PrismaClient } from "../../../generated/prisma";
import { NextRequest, NextResponse } from "next/server";

const prisma = new PrismaClient();

export async function POST(req: NextRequest) {
  try {
    // No ID needed as it will be auto-generated by the database
    const chat = await prisma.chat.create({
      data: {}
    });

    return NextResponse.json(chat, { status: 201 });
  } catch (error) {
    console.error("Error creating chat:", error);
    return NextResponse.json(
      { error: "Failed to create chat" },
      { status: 500 }
    );
  }
}

export async function GET(req: NextRequest) {
  try {
    const url = new URL(req.url);
    const idParam = url.searchParams.get('id');

    if (idParam) {
      const id = parseInt(idParam, 10);
      
      if (isNaN(id)) {
        return NextResponse.json(
          { error: "Chat ID must be a valid integer" },
          { status: 400 }
        );
      }
      
      const chat = await prisma.chat.findUnique({
        where: { id },
      });

      if (!chat) {
        return NextResponse.json(
          { error: "Chat not found" },
          { status: 404 }
        );
      }

      return NextResponse.json(chat);
    } else {
      const chats = await prisma.chat.findMany({
        orderBy: { createdAt: 'desc' },
      });
      return NextResponse.json(chats);
    }
  } catch (error) {
    console.error("Error fetching chats:", error);
    return NextResponse.json(
      { error: "Failed to fetch chats" },
      { status: 500 }
    );
  }
}

export async function DELETE(req: NextRequest) {
  try {
    const url = new URL(req.url);
    const idParam = url.searchParams.get('id');

    if (!idParam) {
      return NextResponse.json(
        { error: "Chat ID is required" },
        { status: 400 }
      );
    }
    
    const id = parseInt(idParam, 10);
    
    if (isNaN(id)) {
      return NextResponse.json(
        { error: "Chat ID must be a valid integer" },
        { status: 400 }
      );
    }

    // Delete the chat
    await prisma.chat.delete({
      where: { id },
    });

    return NextResponse.json({ success: true });
  } catch (error) {
    console.error("Error deleting chat:", error);
    return NextResponse.json(
      { error: "Failed to delete chat" },
      { status: 500 }
    );
  }
}
